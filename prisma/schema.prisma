// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  AGENT
  REP
  USER
}

enum OrderEventStatus {
  PENDING
  PACKING
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

model User {
  id Int @id @default(autoincrement())
  name String
  email String @unique
  password String
  phoneNumber String
  role Role @default(USER)
  defaultShippingAddress Int?
  defaultBillingAddress Int?  

  branchId Int?
  branch Branch? @relation(fields: [branchId], references: [id])

  passwordResetToken String? @unique
  passwordResetExpires DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  addresses Address[]
  cartItems CartItem[]
  orders Order[]

  @@map("users")
}
model Address{
  id Int @id @default(autoincrement())
  lineOne String
  lineTwo String?
  city String
  country String
  pinCode String
  userId Int
  user User @relation(fields: [userId], references: [id]) //This is how one-to-many relationship. User can have multiple addresses
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("addresses")
}

model Product {
  id Int @id @default(autoincrement())
  name String
  productImage String?
  usageImage String?
  mixing String? @db.Text
  applicationMethod String? @db.Text
  storage String? @db.Text
  volume Int?
  price Decimal

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cartItems CartItem[]
  orders OrderProduct[]
  branches BranchProduct[]

  @@fulltext([name])

  @@map("products")
}

model CartItem {
  id Int @id @default(autoincrement())

  userId Int
  user User @relation(fields: [userId], references: [id])
  productId Int
  product Product @relation(fields: [productId], references: [id])

  quantity Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cart_items")

}

model Order {
  id Int @id @default(autoincrement())

  userId Int
  user User @relation(fields: [userId], references: [id])
  
  netAmount Decimal
  address String
  status OrderEventStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products OrderProduct[]
  events OrderEvent[]

  @@map("orders")

}

model OrderProduct {
  id Int @id @default(autoincrement())

  orderId Int
  order Order @relation(fields: [orderId], references: [id])
  productId Int
  product Product @relation(fields: [productId], references: [id])

  quantity Int
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_products")

}

model OrderEvent {
  id Int @id @default(autoincrement())

  orderId Int
  order Order @relation(fields: [orderId], references: [id])
  status OrderEventStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_events")
}

model Branch {
  id Int @id @default(autoincrement())
  name String
  phoneNumber String
  agent Int?
  salesRep Int?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products BranchProduct[]
  users User[]
  

  @@map("branches")
}

model BranchProduct {
  id Int @id @default(autoincrement())

  branchId Int
  branch Branch @relation(fields: [branchId], references: [id])
  productId Int
  product Product @relation(fields: [productId], references: [id])

  quantity Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("branch_products")
}