// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  AGENT
  REP
  USER
}

enum OrderEventStatus {
  PAYMENT_DONE
  PENDING
  PACKING
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
  REQUEST_REFUND
  REFUND_DONE
}
enum StockRequestStatus {
  PENDING
  APPROVED
  REJECTED
  DELIVERED
  COMPLETED
}

model User {
  id Int @id @default(autoincrement())
  name String
  email String @unique
  password String
  phoneNumber String
  userImage String?
  role Role @default(USER)
  defaultShippingAddress Int?
  defaultBillingAddress Int?  

  passwordResetToken String? @unique
  passwordResetExpires DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  agentBranches Branch? @relation("Agent")
  salesRepBranches Branch? @relation("SalesRep")
  branches Branch[] @relation("BranchUsers")

  createdStockRequests StockRequest[] @relation("StockRequestCreator")
  approvedStockRequests StockRequest[] @relation("StockRequestApprover")
visits Visit[] @relation(name: "SalesRepVisits")
  addresses Address[]
  cartItems CartItem[]
  orders Order[]
  reviews Review[]

  @@map("users")
}
model Address{
  id Int @id @default(autoincrement())
  lineOne String
  lineTwo String?
  city String
  country String
  pinCode String
  userId Int
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade) //This is how one-to-many relationship. User can have multiple addresses
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("addresses")
}

model Product {
  id Int @id @default(autoincrement())
  name String
  productImage String?
  usageImage String?
  mixing String? @db.Text
  applicationMethod String? @db.Text
  storage String? @db.Text
  volume Int?
  price Decimal
  itemCode String?
  adminStock Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  stockRequestItems StockRequestItem[]
  cartItems CartItem[]
  orders OrderProduct[]
  branches BranchProduct[]
  reviews Review[]

  @@fulltext([name])

  @@map("products")
}

model CartItem {
  id Int @id @default(autoincrement())

  userId Int
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId Int
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  quantity Int
  branchId Int?
  branchName String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cart_items")

}

model Order {
  id Int @id @default(autoincrement())

  userId Int
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  branchId Int
  branch Branch @relation(fields: [branchId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  
  netAmount Decimal
  subtotalAmount     Decimal?  @db.Decimal(10, 2)
  discountPercentage Decimal?  @default(0) @db.Decimal(5, 2)
  discountAmount     Decimal?  @default(0) @db.Decimal(10, 2)
 
  address String
  status OrderEventStatus @default(PENDING)
  paymentId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
visits Visit[]
  products OrderProduct[]
  events OrderEvent[]
  reviews Review[]

  @@map("orders")

}

model OrderProduct {
  id Int @id @default(autoincrement())

  orderId Int
  order Order @relation(fields: [orderId], references: [id], onUpdate: Cascade)
  productId Int
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  quantity Int
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_products")

}

model OrderEvent {
  id Int @id @default(autoincrement())

  orderId Int
  order Order @relation(fields: [orderId], references: [id], onUpdate: Cascade)
  status OrderEventStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_events")
}

model Branch {
  id Int @id @default(autoincrement())
  name String
  phoneNumber String
  address String?

  agentId Int? @unique
  agent User? @relation("Agent", fields: [agentId], references: [id], onUpdate: Cascade)

  salesRepId Int? @unique
  salesRep User? @relation("SalesRep", fields: [salesRepId], references: [id], onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  stockRequests StockRequest[]
  products BranchProduct[]
  users User[] @relation("BranchUsers")
  orders Order[]
  visits Visit[]
  

  @@map("branches")
}

model BranchProduct {
  id Int @id @default(autoincrement())

  branchId Int
  branch Branch @relation(fields: [branchId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId Int
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  quantity Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("branch_products")
}

model StockRequest {
  id Int @id @default(autoincrement())
  
  branchId Int
  branch Branch @relation(fields: [branchId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  
  createdById Int
  createdBy User @relation("StockRequestCreator", fields: [createdById], references: [id], onDelete: Cascade, onUpdate: Cascade)
  
  approvedById Int?
  approvedBy User? @relation("StockRequestApprover", fields: [approvedById], references: [id], onDelete: SetNull, onUpdate: Cascade)
  
  status StockRequestStatus @default(PENDING)
  note String? @db.Text
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  items StockRequestItem[]
  
  @@map("stock_requests")
}

model StockRequestItem {
  id Int @id @default(autoincrement())
  
  requestId Int
  request StockRequest @relation(fields: [requestId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  
  productId Int
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  
  requestedQuantity Int
  approvedQuantity Int?
  receivedQuantity Int?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("stock_request_items")
}

model Review {
  id Int @id @default(autoincrement())
  
  productId Int
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  
  orderId Int
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  
  userId Int
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  
  rating Int
  comment String? @db.Text
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([productId, orderId, userId])
  @@map("reviews")
}

// Add this model to your existing schema.prisma file

model Visit {
  id Int @id @default(autoincrement())
  
  branchId Int
  branch Branch @relation(fields: [branchId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  
  salesRepId Int
  salesRep User @relation("SalesRepVisits",fields: [salesRepId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  
  orderId Int?
  order Order? @relation(fields: [orderId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  
  customerName String
  address String
  contactNumber String
  purposeOfVisit String
  customerSignature String? // We'll store the signature as a data URL
  
  visitDate DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("visits")
}
